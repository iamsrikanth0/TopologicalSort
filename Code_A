import java.util.*;

public class CycleDetect{

    static class Edge{
        int src;
        int dst;
      public  Edge(int s, int d){
            this.src = s;
            this.dst = d;
        }
    }

public static void creatingAGraphs( ArrayList<Edge> graph[]){
    //Creating empty arraylist fron Null arraylist
    for(int i=0; i<graph.length; i++){
        graph[i]= new ArrayList<Edge>();
    }
    graph[0].add(new Edge(0, 1));
    graph[0].add(new Edge(0, 2));

        graph[1].add(new Edge(1, 0));
        graph[1].add(new Edge(1, 3));

        graph[2].add(new Edge(2, 0));
        graph[2].add(new Edge(2, 4));

        
        graph[3].add(new Edge(3, 1));
        graph[3].add(new Edge(3, 4));
        graph[3].add(new Edge(3, 5));
        
        graph[4].add(new Edge(4, 2));
        graph[4].add(new Edge(4, 3));
        graph[4].add(new Edge(4, 5));

        graph[5].add(new Edge(5, 3));
        graph[5].add(new Edge(5, 4));
        graph[5].add(new Edge(5, 6));

        graph[6].add(new Edge(6, 5));
}

public static void topSortUtil(ArrayList<Edge> graph[], int curr,boolean vis[], Stack<Integer> stack){
    vis[curr]= true;

    for(int i=0; i<graph[curr].size();i++){
        Edge e= graph[curr].get(i);

        if(!vis[e.dst]){
            topSortUtil(graph, e.dst, vis, stack);
        }
}
stack.push(curr);
}

public static void topSort(ArrayList<Edge> graph[], int V){
    boolean vis[] = new boolean[V];
    Stack<Integer> stack = new Stack<>();

    for(int i=0; i<V; i++){
        if(!vis[i]{
            topSortUtil(graph, i, vis, stack);
        })
    }
   while (!stack.isEmpty()){ //for printing
    system.out.print(stack.pop()+ " ");
   }

}



    public static void main(String args[]){
        int V = 7;
        ArrayList<Edge> graph[] = new ArrayList[V];
        creatingAGraphs(graph);
        System.out.println(isCycleUndirected(graph, new boolean vis[V], int 0, -1));

        topSort(graph, V);

    }
}
